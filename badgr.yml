apiVersion: v1
kind: Template
labels:
  app: badgr
  template: django-mariadb-persistent
message: 'The following software have been deployed on https://${APPLICATION_DOMAIN}.'

metadata:
  annotations:
    description: A example deployment of Badgr
    iconClass: icon-python
    openshift.io/display-name: badgr
    openshift.io/documentation-url: https://badgr.org/
    openshift.io/long-description: This template deploy badgr from git
    openshift.io/provider-display-name: OSPO, Red Hat, Inc.
    tags: quickstart,python,django
    template.openshift.io/bindable: 'false'
  name: badgr
objects:

- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
  stringData:
    database-password: ${DATABASE_PASSWORD}
    database-root-password: ${DATABASE_ROOT_PASSWORD}
    database-user: ${DATABASE_USER}
    django-secret-key: ${DJANGO_SECRET_KEY}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "mariadb", "kind": "Service"}]'
    name: ${NAME}
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: ${NAME}

- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAME}

- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}

##TODO
- apiVersion: v1
  kind: ConfigMap
  metadata:
    annotations:
      description: Manage uwsgi configuration
    name: ${NAME}-uwsgi
  data: 
    uwsgi.ini: |+
      [uwsgi]
      http-socket = :8080
      module = wsgi:application
      chdir = /srv/code/
      master = True
      vacuum = True
      max-requests = 5000
      processes = 4
      enable-threads = true
      #static-map = /uploads=/srv/data/uploads
      plugins = python3

- apiVersion: v1
  kind: ConfigMap
  metadata:
    annotations:
      description: Manage badgr configuration
    name: ${NAME}-config
  data:
    config.py: |-
      # -*- coding:utf-8 -*-
      from .settings import *
      from mainsite import TOP_DIR

      DEBUG = True
      DEBUG_ERRORS = DEBUG
      DEBUG_STATIC = DEBUG
      DEBUG_MEDIA = DEBUG

      TIME_ZONE = 'America/Los_Angeles'
      LANGUAGE_CODE = 'en-us'


      UNSUBSCRIBE_KEY = SECRET_KEY = os.environ['SECRET_KEY']
      INTERNAL_IPS = '127.0.0.1'
      ALLOWED_HOSTS = '*'

      DEBUG = False

      ADMIN_EMAILS = ''
      ADMINS = [(email, email) for email in ADMIN_EMAILS]
      MANAGERS = ADMINS

      DATABASES = {
          'default': {
              "ENGINE": "django.db.backends.mysql",
              "NAME": os.environ['DB_NAME'],
              "USER": os.environ['DB_USER'],
              "PASSWORD": os.environ['DB_PASS'],
              "HOST": os.environ['MARIADB_SERVICE_HOST'],
              "PORT": os.environ['MARIADB_SERVICE_PORT'],
              "CONN_MAX_AGE": 120,
          }
      }
      CACHES = {
        'default': {
          'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
          'LOCATION': '',
          'TIMEOUT': 300,
          'KEY_PREFIX': '',
          'VERSION': 1,
        }
      }

      DEFAULT_FROM_EMAIL = ''  # e.g. "noreply@example.com"

      EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

      CELERY_RESULT_BACKEND = None
      CELERY_ALWAYS_EAGER = True

      HTTP_ORIGIN = os.environ['SITE_URL']
      STATIC_URL = HTTP_ORIGIN+'/static/'

      # Optionally restrict issuer creation to accounts that have the 'issuer.add_issuer' permission
      BADGR_APPROVED_ISSUERS_ONLY = False

      # Automatically send an email the first time that recipient identifier (email type) has been used on the system.
      GDPR_COMPLIANCE_NOTIFY_ON_FIRST_AWARD = True


      LOGS_DIR = os.path.join('/tmp', 'logs')
      if not os.path.exists(LOGS_DIR):
          os.makedirs(LOGS_DIR)
      LOGGING = {
          'version': 1,
          'disable_existing_loggers': False,
          'handlers': {
              'mail_admins': {
                  'level': 'ERROR',
                  'filters': [],
                  'class': 'django.utils.log.AdminEmailHandler'
              },

              # badgr events log to disk by default
              'badgr_events': {
                  'level': 'INFO',
                  'formatter': 'json',
                  'class': 'logging.FileHandler',
                  'filename': os.path.join(LOGS_DIR, 'badgr_events.log')
              }
          },
          'loggers': {
              'django.request': {
                  'handlers': ['mail_admins'],
                  'level': 'ERROR',
                  'propagate': True,
              },

              # Badgr.Events emits all badge related activity
              'Badgr.Events': {
                  'handlers': ['badgr_events'],
                  'level': 'INFO',
                  'propagate': False,

              }

          },
          'formatters': {
              'default': {
                  'format': '%(asctime)s %(levelname)s %(module)s %(message)s'
              },
              'json': {
                  '()': 'mainsite.formatters.JsonFormatter',
                  'format': '%(asctime)s',
                  'datefmt': '%Y-%m-%dT%H:%M:%S%z',
              }
          },
      }



- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    source:
      git:
        ref: pr_312
        uri: https://github.com/mscherer/badgr-server.git
      type: Git
      dockerfile: |-
        # TODO test with ubi 8
        FROM fedora:34
        WORKDIR /srv/code
        COPY . .
        # pip for pip install
        # mysql-devel python-devel gcc to build modules
        # uwsgi & uwsgi-plugin-python3 as a server
        # mailcap since uwsgi do not set mime types with /etc/mimetypes
        # python3-cairocffi is pulling cairo, despites being also installed with pip
        RUN dnf install -y python3-pip mysql-devel python3-devel xmlsec1-devel libtool-ltdl-devel gcc uwsgi uwsgi-plugin-python3 mailcap python3-cairocffi && dnf clean all
        RUN pip install .
        # needed since wsgi.py activate a venv
        RUN mkdir -p /srv/env/bin && touch /srv/env/bin/activate_this.py
        RUN ln -s /srv/config/config.py  /srv/code/apps/mainsite/settings_local.py  
        EXPOSE 8080
        CMD ["uwsgi", "--ini", "/srv/uwsgi/uwsgi.ini"]
 
    strategy:
      type: Docker
  triggers:
  - type: ImageChange
  - type: ConfigChange




- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}
      name: ${NAME}
      spec:
        containers:
        - name: ${NAME}
          env:
          - name: SITE_URL
            value: http://${APPLICATION_DOMAIN}
          - name: DB_NAME
            value: ${DATABASE_NAME}
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: django-secret-key
                name: ${NAME}
          image: ' '
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /srv/uwsgi/
            name: config-volume-uwsgi
          - mountPath: /srv/config/
            name: config-volume-umap
        volumes:
        - name: config-volume-umap
          configMap:
            name: ${NAME}-config
        - name: config-volume-uwsgi
          configMap:
            name: ${NAME}-uwsgi


    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${NAME}
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest

    - type: ConfigChange

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: mariadb
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${MARIADB_VOLUME_CAPACITY}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: mariadb
  spec:
    ports:
    - name: mariadb
      port: 3306
      targetPort: 3306
    selector:
      name: mariadb

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: mariadb
  spec:
    replicas: 1
    selector:
      name: mariadb
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: mariadb
        name: mariadb
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: mariadb
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: mariadb
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-root-password
                name: mariadb
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: mariadb
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: mariadb
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: mariadb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: mariadb-data
          persistentVolumeClaim:
            claimName: mariadb


    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mariadb
        from:
          kind: ImageStreamTag
          name: mariadb:10.3-el8
          namespace: openshift
      type: ImageChange
    - type: ConfigChange


parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: badgr

- description: Maximum amount of memory the application container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 1024Mi

- description: Maximum amount of memory the database container can use.
  displayName: Memory Limit (Database)
  name: DATABASE_MEMORY_LIMIT
  required: true
  value: 512Mi

- description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: DATABASE_VOLUME_CAPACITY
  required: true
  value: 1Gi

- description: The exposed hostname that will route to the Django service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
  value: ''

- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: badgr

- displayName: Database username
  name: DATABASE_USER
  required: true
  value: badgr

- displayName: Database user password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD

- displayName: Database root password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_ROOT_PASSWORD

- description: Set this to a long random string.
  displayName: Django secret key
  from: '[\w]{50}'
  generate: expression
  name: DJANGO_SECRET_KEY

- description: Volume space available for badgr data, e.g. 512Mi, 2Gi.
  displayName: Badgr data volume capacity
  name: BADGR_DATA_VOLUME_CAPACITY
  required: true
  value: 1Gi
